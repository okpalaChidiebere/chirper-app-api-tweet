// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package tweetsdataaccess is a generated GoMock package.
package tweetsdataaccess

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tweetmodel "github.com/okpalaChidiebere/chirper-app-api-tweet/v0/tweets/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BulkSaveTweetToDynamoDb mocks base method.
func (m *MockRepository) BulkSaveTweetToDynamoDb(ctx context.Context, tweets []*tweetmodel.Tweet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkSaveTweetToDynamoDb", ctx, tweets)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkSaveTweetToDynamoDb indicates an expected call of BulkSaveTweetToDynamoDb.
func (mr *MockRepositoryMockRecorder) BulkSaveTweetToDynamoDb(ctx, tweets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkSaveTweetToDynamoDb", reflect.TypeOf((*MockRepository)(nil).BulkSaveTweetToDynamoDb), ctx, tweets)
}

// GetTweetFromDynamoDb mocks base method.
func (m *MockRepository) GetTweetFromDynamoDb(ctx context.Context, tweetID string) (*tweetmodel.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTweetFromDynamoDb", ctx, tweetID)
	ret0, _ := ret[0].(*tweetmodel.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTweetFromDynamoDb indicates an expected call of GetTweetFromDynamoDb.
func (mr *MockRepositoryMockRecorder) GetTweetFromDynamoDb(ctx, tweetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTweetFromDynamoDb", reflect.TypeOf((*MockRepository)(nil).GetTweetFromDynamoDb), ctx, tweetID)
}

// ListTweetsFromDynamoDb mocks base method.
func (m *MockRepository) ListTweetsFromDynamoDb(ctx context.Context, authedUserID, nextKey string, limit int32) ([]*tweetmodel.Tweet, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTweetsFromDynamoDb", ctx, authedUserID, nextKey, limit)
	ret0, _ := ret[0].([]*tweetmodel.Tweet)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTweetsFromDynamoDb indicates an expected call of ListTweetsFromDynamoDb.
func (mr *MockRepositoryMockRecorder) ListTweetsFromDynamoDb(ctx, authedUserID, nextKey, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTweetsFromDynamoDb", reflect.TypeOf((*MockRepository)(nil).ListTweetsFromDynamoDb), ctx, authedUserID, nextKey, limit)
}

// SaveLikeToggleInDynamoDb mocks base method.
func (m *MockRepository) SaveLikeToggleInDynamoDb(ctx context.Context, tweetID, author, authedUserID string, hasLiked bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLikeToggleInDynamoDb", ctx, tweetID, author, authedUserID, hasLiked)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLikeToggleInDynamoDb indicates an expected call of SaveLikeToggleInDynamoDb.
func (mr *MockRepositoryMockRecorder) SaveLikeToggleInDynamoDb(ctx, tweetID, author, authedUserID, hasLiked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLikeToggleInDynamoDb", reflect.TypeOf((*MockRepository)(nil).SaveLikeToggleInDynamoDb), ctx, tweetID, author, authedUserID, hasLiked)
}

// SaveTweetToDynamoDb mocks base method.
func (m *MockRepository) SaveTweetToDynamoDb(ctx context.Context, replyingToAuthor string, tweet *tweetmodel.Tweet) (*tweetmodel.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTweetToDynamoDb", ctx, replyingToAuthor, tweet)
	ret0, _ := ret[0].(*tweetmodel.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTweetToDynamoDb indicates an expected call of SaveTweetToDynamoDb.
func (mr *MockRepositoryMockRecorder) SaveTweetToDynamoDb(ctx, replyingToAuthor, tweet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTweetToDynamoDb", reflect.TypeOf((*MockRepository)(nil).SaveTweetToDynamoDb), ctx, replyingToAuthor, tweet)
}

// ScanTweetsFromDynamoDb mocks base method.
func (m *MockRepository) ScanTweetsFromDynamoDb(ctx context.Context, limit int32, nextKey string) ([]*tweetmodel.Tweet, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanTweetsFromDynamoDb", ctx, limit, nextKey)
	ret0, _ := ret[0].([]*tweetmodel.Tweet)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanTweetsFromDynamoDb indicates an expected call of ScanTweetsFromDynamoDb.
func (mr *MockRepositoryMockRecorder) ScanTweetsFromDynamoDb(ctx, limit, nextKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanTweetsFromDynamoDb", reflect.TypeOf((*MockRepository)(nil).ScanTweetsFromDynamoDb), ctx, limit, nextKey)
}
