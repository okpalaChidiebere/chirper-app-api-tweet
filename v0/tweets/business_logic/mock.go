// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package tweetsservice is a generated GoMock package.
package tweetsservice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tweetmodel "github.com/okpalaChidiebere/chirper-app-api-tweet/v0/tweets/model"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BulkSaveTweet mocks base method.
func (m *MockService) BulkSaveTweet(ctx context.Context, tweets []*tweetmodel.Tweet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkSaveTweet", ctx, tweets)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkSaveTweet indicates an expected call of BulkSaveTweet.
func (mr *MockServiceMockRecorder) BulkSaveTweet(ctx, tweets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkSaveTweet", reflect.TypeOf((*MockService)(nil).BulkSaveTweet), ctx, tweets)
}

// ListTweets mocks base method.
func (m *MockService) ListTweets(ctx context.Context, limit int32, nextKey string) ([]*tweetmodel.Tweet, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTweets", ctx, limit, nextKey)
	ret0, _ := ret[0].([]*tweetmodel.Tweet)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTweets indicates an expected call of ListTweets.
func (mr *MockServiceMockRecorder) ListTweets(ctx, limit, nextKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTweets", reflect.TypeOf((*MockService)(nil).ListTweets), ctx, limit, nextKey)
}

// SaveLikeToggle mocks base method.
func (m *MockService) SaveLikeToggle(ctx context.Context, tweetID, author, authedUserID string, hasLiked bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLikeToggle", ctx, tweetID, author, authedUserID, hasLiked)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLikeToggle indicates an expected call of SaveLikeToggle.
func (mr *MockServiceMockRecorder) SaveLikeToggle(ctx, tweetID, author, authedUserID, hasLiked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLikeToggle", reflect.TypeOf((*MockService)(nil).SaveLikeToggle), ctx, tweetID, author, authedUserID, hasLiked)
}

// SaveTweet mocks base method.
func (m *MockService) SaveTweet(ctx context.Context, tweet *tweetmodel.Tweet) (*tweetmodel.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTweet", ctx, tweet)
	ret0, _ := ret[0].(*tweetmodel.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTweet indicates an expected call of SaveTweet.
func (mr *MockServiceMockRecorder) SaveTweet(ctx, tweet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTweet", reflect.TypeOf((*MockService)(nil).SaveTweet), ctx, tweet)
}
